generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  mcqAttempts MCQAttempt[]
  studentBadges StudentBadge[]
  leaderboardSnapshots LeaderboardSnapshot[]
  
  // Teacher rating relation
  teacherRatings TeacherRating[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
  teacherAttendances TeacherAttendance[]
  mcqTests  MCQTest[]
  gradedAnswers StudentAnswer[] // Answers graded by this teacher
  
  // Teacher rating relations
  ratings   TeacherRating[]
  leaderboard TeacherLeaderboard?
  badges    TeacherBadge[] @relation("TeacherBadges")
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  mcqTests      MCQTest[]
  leaderboardSnapshots LeaderboardSnapshot[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
  mcqTests MCQTest[]
  teacherRatings TeacherRating[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  
  // Recurrence fields
  isRecurring     Boolean  @default(false)
  recurrenceEndDate DateTime?
  parentLessonId  Int?     // Reference to the original lesson if this is a duplicate
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])

  @@unique([studentId, date])
  @@index([date])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model TeacherAttendance {
  id              Int       @id @default(autoincrement())
  date            DateTime
  present         Boolean   @default(true)
  checkInTime     DateTime  @default(now())
  teacherId       String
  teacher         Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  locationId      Int?
  location        Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  livenessVerified Boolean  @default(false)
  latitude        Float?
  longitude       Float?
  
  @@unique([teacherId, date])
  @@index([date])
  @@index([teacherId])
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  latitude    Float
  longitude   Float
  radius      Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  teacherAttendances TeacherAttendance[]
}

model AttendanceSettings {
  id                Int      @id @default(autoincrement())
  startTime         String   // Format: "HH:MM" (e.g., "08:00")
  endTime           String   // Format: "HH:MM" (e.g., "08:45")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// MCQ System Models
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  OPEN_ENDED
}

model MCQTest {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  subjectId   Int?
  classId     Int?
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject   Subject?      @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  class     Class?        @relation(fields: [classId], references: [id], onDelete: SetNull)
  teacher   Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  questions MCQQuestion[]
  attempts  MCQAttempt[]
  ratings   TeacherRating[] // Ratings given after completing this test
  
  @@index([teacherId])
  @@index([subjectId])
  @@index([classId])
}

model MCQQuestion {
  id           String       @id @default(cuid())
  testId       String
  question     String       @db.Text
  answer       String       // The correct answer text
  options      Json         // Array of option strings: ["Option A", "Option B", "Option C", "Option D"]
  questionType QuestionType @default(MULTIPLE_CHOICE)
  explanation  String?      @db.Text
  orderIndex   Int          // For question ordering
  createdAt    DateTime     @default(now())
  
  test    MCQTest         @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]
  
  @@index([testId])
}

model MCQAttempt {
  id             String    @id @default(cuid())
  testId         String
  studentId      String
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  score          Float?
  totalQuestions Int
  correctAnswers Int       @default(0)
  
  test    MCQTest         @relation(fields: [testId], references: [id], onDelete: Cascade)
  student Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]
  
  @@index([testId])
  @@index([studentId])
}

model StudentAnswer {
  id            String    @id @default(cuid())
  attemptId     String
  questionId    String
  userAnswer    String    @db.Text
  isCorrect     Boolean?  // Nullable for open-ended questions pending grading
  answeredAt    DateTime  @default(now())
  gradedAt      DateTime? // When teacher graded the answer
  gradedBy      String?   // Teacher who graded
  teacherFeedback String? @db.Text // Optional feedback from teacher
  pointsAwarded Float?    // For partial credit (0-1, where 1 = full credit)
  
  attempt  MCQAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question MCQQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  grader   Teacher?    @relation(fields: [gradedBy], references: [id], onDelete: SetNull)
  
  @@unique([attemptId, questionId]) // Student can only answer each question once per attempt
  @@index([attemptId])
  @@index([questionId])
  @@index([gradedBy])
}

// Leaderboard & Achievement System
enum BadgeType {
  RANK_BASED      // Top 1, Top 3, Top 10
  SCORE_BASED     // Perfect score, High achiever
  ACTIVITY_BASED  // Tests taken, Streak
  IMPROVEMENT     // Most improved
  CUSTOM          // Admin defined
}

model Badge {
  id              String    @id @default(cuid())
  name            String    // "Gold Medal", "Perfect Score", "Knowledge Seeker"
  description     String    @db.Text // "Awarded for achieving 1st rank"
  icon            String?   // URL or emoji
  color           String    @default("#FFD700") // Hex color code
  badgeType       BadgeType @default(CUSTOM)
  
  // Criteria for earning (JSON structure)
  criteria        Json      // { "type": "rank", "value": 1 } or { "type": "score", "min": 95 }
  
  // Settings
  isActive        Boolean   @default(true)
  priority        Int       @default(0) // Display order
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  studentBadges   StudentBadge[]
  teacherBadges   TeacherBadge[]  // Shared badge system for teachers too
  
  @@index([badgeType])
  @@index([isActive])
}

model StudentBadge {
  id          String   @id @default(cuid())
  studentId   String
  badgeId     String
  earnedAt    DateTime @default(now())
  metadata    Json?    // Additional info like rank, score when earned
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  badge   Badge   @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, badgeId]) // Each student can earn a badge once
  @@index([studentId])
  @@index([badgeId])
}

model LeaderboardConfig {
  id                    Int      @id @default(autoincrement())
  
  // Calculation settings
  useFirstAttemptOnly   Boolean  @default(true)
  minimumTestsRequired  Int      @default(1)
  includeIncomplete     Boolean  @default(false)
  
  // Time period settings
  enableTimePeriod      Boolean  @default(false)
  periodDays            Int?     // If set, only tests from last N days
  
  // Display settings
  showTop               Int      @default(10) // Show top N students
  showStudentRank       Boolean  @default(true)
  enableClassFilter     Boolean  @default(true)
  enableSubjectFilter   Boolean  @default(true)
  
  // Privacy settings
  allowAnonymous        Boolean  @default(false)
  showFullNames         Boolean  @default(true)
  
  // Achievement settings
  autoAwardBadges       Boolean  @default(true)
  
  updatedAt             DateTime @updatedAt
  createdAt             DateTime @default(now())
}

model LeaderboardSnapshot {
  id          String   @id @default(cuid())
  studentId   String
  classId     Int?
  
  // Snapshot data
  rank        Int
  averageScore Float
  totalTests  Int
  bestScore   Float
  
  // Metadata
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class?  @relation(fields: [classId], references: [id], onDelete: SetNull)
  
  @@index([studentId])
  @@index([classId])
  @@index([createdAt])
  @@index([rank])
}

// ===== TEACHER RATING SYSTEM =====

model TeacherRating {
  id                String   @id @default(cuid())
  studentId         String
  teacherId         String
  testId            String?  // MCQ test that was completed
  subjectId         Int?     // Subject being taught
  
  // Simple 5-star rating
  rating            Int      // 1-5 stars
  
  // Optional feedback
  comment           String?  @db.Text
  
  // Metadata
  isAnonymous       Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  test    MCQTest? @relation(fields: [testId], references: [id], onDelete: SetNull)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  
  @@unique([studentId, teacherId, testId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([rating])
}

model TeacherLeaderboard {
  id                    String   @id @default(cuid())
  teacherId             String   @unique
  
  // Rating metrics
  averageRating         Float    @default(0)
  totalRatings          Int      @default(0)
  fiveStarCount         Int      @default(0)
  fourStarCount         Int      @default(0)
  threeStarCount        Int      @default(0)
  twoStarCount          Int      @default(0)
  oneStarCount          Int      @default(0)
  
  // Overall score (same as averageRating for simplicity)
  overallScore          Float    @default(0)
  rank                  Int?
  
  // Badges earned (links to existing Badge system)
  badges                TeacherBadge[]
  
  lastCalculated        DateTime @default(now())
  
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model TeacherBadge {
  id                String   @id @default(cuid())
  teacherId         String
  badgeId           String   // Links to existing Badge model
  earnedAt          DateTime @default(now())
  metadata          Json?    // Additional context (rank, rating when earned)
  
  teacher           Teacher  @relation("TeacherBadges", fields: [teacherId], references: [id], onDelete: Cascade)
  leaderboard       TeacherLeaderboard @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, map: "TeacherBadge_leaderboard_fkey")
  badge             Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([teacherId, badgeId])
  @@index([teacherId])
  @@index([badgeId])
}
