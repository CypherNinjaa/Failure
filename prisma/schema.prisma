generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  mcqAttempts MCQAttempt[]
  studentBadges StudentBadge[]
  leaderboardSnapshots LeaderboardSnapshot[]
  
  // Teacher rating relation
  teacherRatings TeacherRating[]
  
  // Finance relations
  studentFees StudentFee[]
  
  // Anti-cheating relations
  cheatingSuspensions CheatingSuspension[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
  teacherAttendances TeacherAttendance[]
  mcqTests  MCQTest[]
  gradedAnswers StudentAnswer[] // Answers graded by this teacher
  
  // Teacher rating relations
  ratings   TeacherRating[]
  leaderboard TeacherLeaderboard?
  badges    TeacherBadge[] @relation("TeacherBadges")
  
  // Finance relations
  salaries  Salary[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
  
  // Finance relations
  feeStructures FeeStructure[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  mcqTests      MCQTest[]
  leaderboardSnapshots LeaderboardSnapshot[]
  
  // Finance relations
  feeStructures FeeStructure[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
  mcqTests MCQTest[]
  teacherRatings TeacherRating[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  
  // Recurrence fields
  isRecurring     Boolean  @default(false)
  recurrenceEndDate DateTime?
  parentLessonId  Int?     // Reference to the original lesson if this is a duplicate
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])

  @@unique([studentId, date])
  @@index([date])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model TeacherAttendance {
  id              Int       @id @default(autoincrement())
  date            DateTime
  present         Boolean   @default(true)
  checkInTime     DateTime  @default(now())
  teacherId       String
  teacher         Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  locationId      Int?
  location        Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  livenessVerified Boolean  @default(false)
  latitude        Float?
  longitude       Float?
  
  @@unique([teacherId, date])
  @@index([date])
  @@index([teacherId])
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  latitude    Float
  longitude   Float
  radius      Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  teacherAttendances TeacherAttendance[]
}

model AttendanceSettings {
  id                Int      @id @default(autoincrement())
  startTime         String   // Format: "HH:MM" (e.g., "08:00")
  endTime           String   // Format: "HH:MM" (e.g., "08:45")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// MCQ System Models
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  OPEN_ENDED
}

model MCQTest {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  subjectId   Int?
  classId     Int?
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject   Subject?      @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  class     Class?        @relation(fields: [classId], references: [id], onDelete: SetNull)
  teacher   Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  questions MCQQuestion[]
  attempts  MCQAttempt[]
  ratings   TeacherRating[] // Ratings given after completing this test
  
  @@index([teacherId])
  @@index([subjectId])
  @@index([classId])
}

model MCQQuestion {
  id           String       @id @default(cuid())
  testId       String
  question     String       @db.Text
  answer       String       // The correct answer text
  options      Json         // Array of option strings: ["Option A", "Option B", "Option C", "Option D"]
  questionType QuestionType @default(MULTIPLE_CHOICE)
  explanation  String?      @db.Text
  orderIndex   Int          // For question ordering
  createdAt    DateTime     @default(now())
  
  test    MCQTest         @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]
  
  @@index([testId])
}

model MCQAttempt {
  id                      String    @id @default(cuid())
  testId                  String
  studentId               String
  startedAt               DateTime  @default(now())
  completedAt             DateTime?
  score                   Float?
  totalQuestions          Int
  correctAnswers          Int       @default(0)
  
  // Anti-Cheating System
  cheatingViolations      Int       @default(0)
  violationDetails        Json?     // Array of violation events with timestamps
  isTerminatedForCheating Boolean   @default(false)
  finalPenaltyPercentage  Float     @default(0) // Total penalty applied
  
  test    MCQTest         @relation(fields: [testId], references: [id], onDelete: Cascade)
  student Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]
  
  @@index([testId])
  @@index([studentId])
}

model StudentAnswer {
  id            String    @id @default(cuid())
  attemptId     String
  questionId    String
  userAnswer    String    @db.Text
  isCorrect     Boolean?  // Nullable for open-ended questions pending grading
  answeredAt    DateTime  @default(now())
  gradedAt      DateTime? // When teacher graded the answer
  gradedBy      String?   // Teacher who graded
  teacherFeedback String? @db.Text // Optional feedback from teacher
  pointsAwarded Float?    // For partial credit (0-1, where 1 = full credit)
  
  attempt  MCQAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question MCQQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  grader   Teacher?    @relation(fields: [gradedBy], references: [id], onDelete: SetNull)
  
  @@unique([attemptId, questionId]) // Student can only answer each question once per attempt
  @@index([attemptId])
  @@index([questionId])
  @@index([gradedBy])
}

// Leaderboard & Achievement System
enum BadgeType {
  RANK_BASED      // Top 1, Top 3, Top 10
  SCORE_BASED     // Perfect score, High achiever
  ACTIVITY_BASED  // Tests taken, Streak
  IMPROVEMENT     // Most improved
  CUSTOM          // Admin defined
}

model Badge {
  id              String    @id @default(cuid())
  name            String    // "Gold Medal", "Perfect Score", "Knowledge Seeker"
  description     String    @db.Text // "Awarded for achieving 1st rank"
  icon            String?   // URL or emoji
  color           String    @default("#FFD700") // Hex color code
  badgeType       BadgeType @default(CUSTOM)
  
  // Criteria for earning (JSON structure)
  criteria        Json      // { "type": "rank", "value": 1 } or { "type": "score", "min": 95 }
  
  // Settings
  isActive        Boolean   @default(true)
  priority        Int       @default(0) // Display order
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  studentBadges   StudentBadge[]
  teacherBadges   TeacherBadge[]  // Shared badge system for teachers too
  
  @@index([badgeType])
  @@index([isActive])
}

model StudentBadge {
  id          String   @id @default(cuid())
  studentId   String
  badgeId     String
  earnedAt    DateTime @default(now())
  metadata    Json?    // Additional info like rank, score when earned
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  badge   Badge   @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, badgeId]) // Each student can earn a badge once
  @@index([studentId])
  @@index([badgeId])
}

model LeaderboardConfig {
  id                    Int      @id @default(autoincrement())
  
  // Calculation settings
  useFirstAttemptOnly   Boolean  @default(true)
  minimumTestsRequired  Int      @default(1)
  includeIncomplete     Boolean  @default(false)
  
  // Time period settings
  enableTimePeriod      Boolean  @default(false)
  periodDays            Int?     // If set, only tests from last N days
  
  // Display settings
  showTop               Int      @default(10) // Show top N students
  showStudentRank       Boolean  @default(true)
  enableClassFilter     Boolean  @default(true)
  enableSubjectFilter   Boolean  @default(true)
  
  // Privacy settings
  allowAnonymous        Boolean  @default(false)
  showFullNames         Boolean  @default(true)
  
  // Achievement settings
  autoAwardBadges       Boolean  @default(true)
  
  updatedAt             DateTime @updatedAt
  createdAt             DateTime @default(now())
}

model LeaderboardSnapshot {
  id          String   @id @default(cuid())
  studentId   String
  classId     Int?
  
  // Snapshot data
  rank        Int
  averageScore Float
  totalTests  Int
  bestScore   Float
  
  // Metadata
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class?  @relation(fields: [classId], references: [id], onDelete: SetNull)
  
  @@index([studentId])
  @@index([classId])
  @@index([createdAt])
  @@index([rank])
}

// ===== TEACHER RATING SYSTEM =====

model TeacherRating {
  id                String   @id @default(cuid())
  studentId         String
  teacherId         String
  testId            String?  // MCQ test that was completed
  subjectId         Int?     // Subject being taught
  
  // Simple 5-star rating
  rating            Int      // 1-5 stars
  
  // Optional feedback
  comment           String?  @db.Text
  
  // Metadata
  isAnonymous       Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  test    MCQTest? @relation(fields: [testId], references: [id], onDelete: SetNull)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  
  @@unique([studentId, teacherId, testId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([rating])
}

// ===== ANTI-CHEATING SYSTEM =====

model CheatingSuspension {
  id             String   @id @default(cuid())
  studentId      String
  reason         String   @db.Text // "Multiple tab switches during MCQ Test"
  violationCount Int      // Total lifetime violations for this student
  suspendedAt    DateTime @default(now())
  suspendedUntil DateTime // When the suspension ends
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  
  // Penalty removal tracking
  wasReduced     Boolean  @default(false) // If penalty was reduced due to good behavior
  reducedAt      DateTime? // When penalty was reduced
  reducedBy      String?  // Admin ID who reduced the penalty
  reductionReason String? @db.Text // Reason for reduction
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
  @@index([isActive])
  @@index([suspendedUntil])
}

// Track penalty removal/reduction history
model PenaltyReduction {
  id                   String   @id @default(cuid())
  studentId            String
  originalSuspensionId String?  // If linked to a suspension
  violationsRemoved    Int      @default(0) // Number of violations forgiven
  reason               String   @db.Text
  reducedBy            String   // Admin ID who approved reduction
  reducedAt            DateTime @default(now())
  
  // Criteria that triggered reduction
  cleanTestsCompleted  Int      @default(0) // Clean tests without violations
  daysWithoutViolation Int      @default(0) // Days since last violation
  goodBehaviorScore    Float    @default(0) // Calculated good behavior metric
  
  @@index([studentId])
  @@index([reducedAt])
}

model TeacherLeaderboard {
  id                    String   @id @default(cuid())
  teacherId             String   @unique
  
  // Rating metrics
  averageRating         Float    @default(0)
  totalRatings          Int      @default(0)
  fiveStarCount         Int      @default(0)
  fourStarCount         Int      @default(0)
  threeStarCount        Int      @default(0)
  twoStarCount          Int      @default(0)
  oneStarCount          Int      @default(0)
  
  // Overall score (same as averageRating for simplicity)
  overallScore          Float    @default(0)
  rank                  Int?
  
  // Badges earned (links to existing Badge system)
  badges                TeacherBadge[]
  
  lastCalculated        DateTime @default(now())
  
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model TeacherBadge {
  id                String   @id @default(cuid())
  teacherId         String
  badgeId           String   // Links to existing Badge model
  earnedAt          DateTime @default(now())
  metadata          Json?    // Additional context (rank, rating when earned)
  
  teacher           Teacher  @relation("TeacherBadges", fields: [teacherId], references: [id], onDelete: Cascade)
  leaderboard       TeacherLeaderboard @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, map: "TeacherBadge_leaderboard_fkey")
  badge             Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([teacherId, badgeId])
  @@index([teacherId])
  @@index([badgeId])
}

// ============================================
// FINANCE SYSTEM MODELS
// ============================================

// Fee Structure Templates (e.g., "Grade 10 Monthly Fee - ₹500")
model FeeStructure {
  id          String        @id @default(cuid())
  name        String        // "Grade 10 Tuition Fee", "Transport Fee", etc.
  description String?
  amount      Float         // Base amount
  frequency   FeeFrequency  // MONTHLY, QUARTERLY, ANNUAL, ONE_TIME
  feeType     FeeType       // TUITION, TRANSPORT, LIBRARY, EXAM, etc.
  
  // Optional: Link to specific class/grade
  classId     Int?
  gradeId     Int?
  
  isActive    Boolean       @default(true)
  
  // Relations
  class       Class?        @relation(fields: [classId], references: [id], onDelete: SetNull)
  grade       Grade?        @relation(fields: [gradeId], references: [id], onDelete: SetNull)
  studentFees StudentFee[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([classId])
  @@index([gradeId])
  @@index([feeType])
}

// Individual student fee assignments (monthly/quarterly/annual)
model StudentFee {
  id              String        @id @default(cuid())
  studentId       String
  feeStructureId  String
  
  // Amount details
  totalAmount     Float         // Total amount for this period
  paidAmount      Float         @default(0)
  pendingAmount   Float         // Calculated: totalAmount - paidAmount
  
  // Due date and period
  dueDate         DateTime
  month           Int?          // 1-12 (for monthly fees)
  year            Int           // 2025, 2026, etc.
  
  // Status: PAID (green), PARTIAL (yellow), PENDING (red), OVERDUE (dark red)
  status          FeeStatus     @default(PENDING)
  
  // Carried forward from previous month (if partial payment)
  carriedForward  Float         @default(0)
  
  // Payment tracking
  payments        Payment[]
  
  // Relations
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  feeStructure    FeeStructure  @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@unique([studentId, feeStructureId, month, year])
  @@index([studentId])
  @@index([status])
  @@index([dueDate])
}

// Payment records (both online and offline)
model Payment {
  id              String          @id @default(cuid())
  studentFeeId    String
  
  amount          Float
  paymentMethod   PaymentMethod   // CASH, CARD, BANK_TRANSFER, ONLINE_UPI, CHEQUE
  paymentDate     DateTime        @default(now())
  
  // Receipt details
  receiptNumber   String          @unique
  notes           String?
  
  // For online payments (UPI/screenshot based)
  transactionId   String?         // User-entered transaction ID
  screenshot      String?         // Cloudinary URL of payment screenshot
  paymentApp      String?         // PhonePe, GPay, Paytm, BHIM, etc.
  
  // Approval workflow for online payments
  approvalStatus  ApprovalStatus  @default(PENDING)
  approvedBy      String?         // Admin userId who approved
  approvedAt      DateTime?
  rejectionReason String?
  
  // Who processed (for offline payments)
  processedBy     String?         // Admin/staff userId
  
  // Relations
  studentFee      StudentFee      @relation(fields: [studentFeeId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([receiptNumber])
  @@index([approvalStatus])
  @@index([studentFeeId])
}

// Teacher/Staff Salary Records
model Salary {
  id          String        @id @default(cuid())
  teacherId   String?
  staffName   String?       // For non-teacher staff
  
  amount      Float
  month       Int           // 1-12
  year        Int
  
  status      PaymentStatus @default(PENDING)
  paidDate    DateTime?
  
  paymentMethod PaymentMethod?
  notes       String?
  processedBy String?       // Admin userId
  
  teacher     Teacher?      @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([teacherId])
  @@index([status])
}

// General Income tracking (non-fee income)
model Income {
  id          String          @id @default(cuid())
  title       String
  source      String          // "Donation from Mr. X", "Annual Day Event", etc.
  amount      Float
  category    IncomeCategory
  date        DateTime
  description String?
  
  // Who recorded this
  recordedBy  String?         // Admin userId
  
  createdAt   DateTime        @default(now())
  
  @@index([category])
  @@index([date])
}

// General Expense tracking
model Expense {
  id          String            @id @default(cuid())
  title       String            // "Electricity Bill", "Stationery Purchase"
  amount      Float
  category    ExpenseCategory
  date        DateTime
  description String?
  receipt     String?           // Receipt image URL (Cloudinary)
  
  // Approval workflow
  status      ApprovalStatus    @default(APPROVED)
  approvedBy  String?           // Admin userId
  
  // Who recorded
  recordedBy  String?           // Admin userId
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([category])
  @@index([date])
  @@index([status])
}

// Payment Configuration (UPI ID, QR Code for online payments)
model PaymentConfig {
  id          Int       @id @default(1)
  
  // UPI details
  upiId       String?
  upiQRCode   String?   // Cloudinary URL
  
  // Bank details (for reference)
  bankName    String?
  accountNumber String?
  ifscCode    String?
  
  // Instructions for parents
  instructions String?  @db.Text
  
  isActive    Boolean   @default(true)
  
  updatedAt   DateTime  @updatedAt
}

// ============================================
// DYNAMIC NOTIFICATION SYSTEM
// ============================================

// Notification Categories (Master Configuration)
model NotificationCategory {
  id                String   @id @default(cuid())
  key               String   @unique // "FEE_OVERDUE", "EXAM_SCHEDULED", etc.
  name              String   // Display name
  description       String?  @db.Text
  category          NotificationGroup // FINANCE, ACADEMICS, ATTENDANCE, etc.
  icon              String?  // Emoji or icon name
  
  defaultEnabled    Boolean  @default(true)
  applicableRoles   Json     // ["parent", "admin", "student", "teacher"]
  supportedChannels Json     // { "push": true, "email": true }
  priority          NotificationPriority @default(MEDIUM)
  
  isActive          Boolean  @default(true)
  displayOrder      Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  userPreferences   UserNotificationPreference[]
  
  @@index([category])
  @@index([isActive])
}

// User Notification Preferences
model UserNotificationPreference {
  id            String   @id @default(cuid())
  userId        String   // Clerk user ID
  categoryKey   String   // FK to NotificationCategory.key
  
  isEnabled     Boolean  @default(true)
  channels      Json     // { "push": true, "email": false }
  frequency     NotificationFrequency @default(INSTANT)
  
  // Quiet hours settings
  quietHoursEnabled Boolean @default(false)
  quietHoursStart   String? // "22:00"
  quietHoursEnd     String? // "08:00"
  
  category      NotificationCategory @relation(fields: [categoryKey], references: [key], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, categoryKey])
  @@index([userId])
  @@index([categoryKey])
}

// Push Subscription Storage
model PushSubscription {
  id          String   @id @default(cuid())
  userId      String   
  endpoint    String   @unique
  keys        Json     // { p256dh: string, auth: string }
  
  userAgent   String?
  deviceType  String?  // "desktop", "mobile", "tablet"
  
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([isActive])
}

// Enhanced Notification Model
model Notification {
  id              String   @id @default(cuid())
  
  // Target audience
  recipientType   NotificationRecipient // STUDENT, PARENT, TEACHER, ALL
  recipientId     String?  // Specific user ID (null = broadcast)
  
  // Notification category
  categoryKey     String?  // Link to NotificationCategory
  
  // Message content
  title           String
  message         String   @db.Text
  type            NotificationType @default(GENERAL)
  
  // Delivery tracking
  channels        Json?    // { "push": "sent", "email": "failed" }
  sendEmail       Boolean  @default(false)
  sendWebPush     Boolean  @default(true)
  
  // Status
  status          NotificationStatus @default(UNREAD)
  sentAt          DateTime?
  readAt          DateTime?
  
  // Digest mode
  isDigest        Boolean  @default(false)
  digestSentAt    DateTime?
  
  // Admin override
  isForced        Boolean  @default(false) // Admin force-send
  
  // Related entities
  metadata        Json?    // Flexible data: { feeId, examId, etc. }
  
  // Who created
  createdBy       String?  // Admin userId
  
  createdAt       DateTime @default(now())
  
  @@index([recipientId])
  @@index([status])
  @@index([type])
  @@index([categoryKey])
  @@index([isDigest])
}

// Notification Delivery Log (Audit Trail)
model NotificationLog {
  id              String   @id @default(cuid())
  notificationId  String?  // Link to Notification
  userId          String
  categoryKey     String
  
  title           String
  message         String   @db.Text
  
  channels        Json     // { "push": "success", "email": "failed" }
  deliveryStatus  DeliveryStatus
  errorMessage    String?  @db.Text
  
  metadata        Json?    // Context data
  
  sentAt          DateTime @default(now())
  
  @@index([userId])
  @@index([categoryKey])
  @@index([deliveryStatus])
  @@index([sentAt])
}

// ============================================
// ENUMS FOR FINANCE SYSTEM
// ============================================

enum FeeFrequency {
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  ONE_TIME
}

enum FeeType {
  TUITION
  TRANSPORT
  LIBRARY
  EXAM
  SPORTS
  LAB
  ADMISSION
  HOSTEL
  OTHER
}

enum FeeStatus {
  PAID      // Fully paid (GREEN)
  PARTIAL   // Partially paid (YELLOW)
  PENDING   // Not paid yet (RED)
  OVERDUE   // Past due date (DARK RED)
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  ONLINE_UPI
  CHEQUE
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum IncomeCategory {
  DONATION
  EVENT
  SPONSORSHIP
  ADMISSION_FEE
  OTHER
}

enum ExpenseCategory {
  SALARY
  UTILITIES
  SUPPLIES
  MAINTENANCE
  TRANSPORT
  FOOD
  INFRASTRUCTURE
  OTHER
}

enum NotificationRecipient {
  STUDENT
  PARENT
  TEACHER
  ADMIN
  ALL
}

enum NotificationType {
  FEE_REMINDER
  PAYMENT_APPROVED
  PAYMENT_REJECTED
  FEE_DUE
  GENERAL
  EXAM_SCHEDULED
  RESULT_PUBLISHED
  ASSIGNMENT_DUE
  ATTENDANCE_ALERT
  BADGE_EARNED
  ANNOUNCEMENT
  EVENT_REMINDER
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationGroup {
  FINANCE
  ACADEMICS
  ATTENDANCE
  ACHIEVEMENT
  EVENTS
  ANNOUNCEMENTS
  COMMUNICATION
  SYSTEM
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationFrequency {
  INSTANT
  DAILY_DIGEST
  WEEKLY_DIGEST
}

enum DeliveryStatus {
  SUCCESS
  FAILED
  PARTIALLY_SENT
  QUEUED
}

// ============================================
// MESSAGING SYSTEM (Real-Time Chat)
// ============================================

model Conversation {
  id              String    @id @default(cuid())
  type            ConversationType @default(DIRECT) // DIRECT or GROUP
  name            String?   // For group chats only
  description     String?   @db.Text // Group description
  avatar          String?   // Group avatar URL (Cloudinary)
  
  // Participants
  participants    ConversationParticipant[]
  messages        Message[]
  
  // Group metadata
  isArchived      Boolean   @default(false)
  createdBy       String?   // Creator userId
  
  lastMessageAt   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([lastMessageAt])
  @@index([type])
  @@index([createdBy])
}

model ConversationParticipant {
  id              String    @id @default(cuid())
  conversationId  String
  userId          String    // Clerk user ID
  userRole        String?   // "admin", "teacher", "student", "parent" - for display purposes
  role            ParticipantRole @default(MEMBER) // ADMIN, MEMBER (for group management)
  
  // Read status
  lastReadAt      DateTime?
  unreadCount     Int       @default(0)
  
  // Settings
  isMuted         Boolean   @default(false)
  isPinned        Boolean   @default(false)
  
  // Typing indicator
  isTyping        Boolean   @default(false)
  lastTypingAt    DateTime?
  
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  joinedAt        DateTime  @default(now())
  leftAt          DateTime? // When user left group
  
  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
  @@index([unreadCount])
}

model Message {
  id              String    @id @default(cuid())
  conversationId  String
  senderId        String    // Clerk user ID
  senderRole      String?   // "admin", "teacher", etc. - cached for display
  
  // Content
  content         String    @db.Text
  attachments     Json?     // Array of { url: string, type: string, name: string, size: number }
  
  // Message type
  messageType     MessageType @default(TEXT) // TEXT, IMAGE, FILE, SYSTEM
  
  // Metadata
  isEdited        Boolean   @default(false)
  editedAt        DateTime?
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?
  
  // Reply/Thread
  replyToId       String?   // If replying to another message
  replyTo         Message?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies         Message[] @relation("MessageReplies")
  
  // Reactions
  reactions       MessageReaction[]
  
  // Read receipts (who has read this message)
  readBy          Json?     // Array of { userId: string, readAt: timestamp }
  
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@index([replyToId])
}

model MessageReaction {
  id          String   @id @default(cuid())
  messageId   String
  userId      String   // Who reacted
  emoji       String   // "👍", "❤️", "😊", "🎉", "🔥"
  
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

enum ConversationType {
  DIRECT
  GROUP
}

enum ParticipantRole {
  ADMIN   // Can add/remove members, change settings (group chats)
  MEMBER  // Regular participant
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM  // "John joined the group", "Jane left the group"
}
