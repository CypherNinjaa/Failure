generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  
  // MCQ Relations
  mcqAttempts     MCQAttempt[]
  wrongAnswers    WrongAnswer[]
  points          StudentPoints?
  achievements    Achievement[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
  teacherAttendances TeacherAttendance[]
  
  // MCQ Relations
  mcqTests    MCQTest[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  
  // MCQ Relations
  mcqTests      MCQTest[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
  
  // MCQ Relations
  mcqTests MCQTest[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  
  // Recurrence fields
  isRecurring     Boolean  @default(false)
  recurrenceEndDate DateTime?
  parentLessonId  Int?     // Reference to the original lesson if this is a duplicate
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])

  @@unique([studentId, date])
  @@index([date])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model TeacherAttendance {
  id              Int       @id @default(autoincrement())
  date            DateTime
  present         Boolean   @default(true)
  checkInTime     DateTime  @default(now())
  teacherId       String
  teacher         Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  locationId      Int?
  location        Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  livenessVerified Boolean  @default(false)
  latitude        Float?
  longitude       Float?
  
  @@unique([teacherId, date])
  @@index([date])
  @@index([teacherId])
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  latitude    Float
  longitude   Float
  radius      Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  teacherAttendances TeacherAttendance[]
}

model AttendanceSettings {
  id                Int      @id @default(autoincrement())
  startTime         String   // Format: "HH:MM" (e.g., "08:00")
  endTime           String   // Format: "HH:MM" (e.g., "08:45")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// MCQ System Models

model MCQTest {
  id                Int       @id @default(autoincrement())
  title             String
  description       String?
  subjectId         Int
  classId           Int
  teacherId         String
  totalPoints       Int       @default(0)
  duration          Int       // Duration in minutes
  deadline          DateTime
  startTime         DateTime
  isPublished       Boolean   @default(false)
  shuffleQuestions  Boolean   @default(true)
  shuffleOptions    Boolean   @default(true)
  passingScore      Int?      // Minimum score to pass
  allowReview       Boolean   @default(true)
  showResults       Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  subject           Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class             Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher           Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  questions         MCQQuestion[]
  attempts          MCQAttempt[]
  
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([deadline])
}

model MCQQuestion {
  id                Int             @id @default(autoincrement())
  testId            Int
  questionType      QuestionType
  questionText      String          @db.Text
  options           Json?           // Array of options for MCQ/Match following
  correctAnswer     Json            // Correct answer(s) - flexible format
  explanation       String?         @db.Text
  points            Int             @default(1)
  negativeMarking   Float           @default(0)
  order             Int
  imageUrl          String?         // Optional image for question
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  test              MCQTest         @relation(fields: [testId], references: [id], onDelete: Cascade)
  wrongAnswers      WrongAnswer[]
  
  @@index([testId])
}

model MCQAttempt {
  id                Int       @id @default(autoincrement())
  testId            Int
  studentId         String
  score             Int       @default(0)
  totalPoints       Int
  correctAnswers    Int       @default(0)
  wrongAnswers      Int       @default(0)
  unanswered        Int       @default(0)
  startedAt         DateTime  @default(now())
  submittedAt       DateTime?
  timeSpent         Int       @default(0) // Time in seconds
  answers           Json      // Student's answers with question IDs
  tabSwitches       Int       @default(0)
  copyPasteAttempts Int       @default(0)
  isFlagged         Boolean   @default(false)
  isCompleted       Boolean   @default(false)
  percentageScore   Float     @default(0)
  
  test              MCQTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([testId, studentId])
  @@index([studentId])
  @@index([testId])
  @@index([submittedAt])
}

model WrongAnswer {
  id            Int         @id @default(autoincrement())
  studentId     String
  questionId    Int
  attemptCount  Int         @default(1)
  lastAttempted DateTime    @default(now())
  isResolved    Boolean     @default(false)
  
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  question      MCQQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, questionId])
  @@index([studentId])
  @@index([questionId])
}

model StudentPoints {
  id            Int       @id @default(autoincrement())
  studentId     String    @unique
  totalPoints   Int       @default(0)
  rank          Int?
  testsCompleted Int      @default(0)
  averageScore  Float     @default(0)
  lastUpdated   DateTime  @default(now()) @updatedAt
  
  student       Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([totalPoints])
  @@index([rank])
}

model Achievement {
  id          Int       @id @default(autoincrement())
  studentId   String
  badgeType   String    // "FIRST_TEST", "10_TESTS", "100_POINTS", "PERFECT_SCORE", etc.
  earnedAt    DateTime  @default(now())
  
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
  @@unique([studentId, badgeType])
}

enum QuestionType {
  MULTIPLE_CHOICE   // Single correct answer from options
  MULTI_SELECT      // Multiple correct answers
  TRUE_FALSE        // True or False
  FILL_BLANK        // Fill in the blank
  MATCH_FOLLOWING   // Match pairs
}

