generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  mcqAttempts MCQAttempt[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
  teacherAttendances TeacherAttendance[]
  mcqTests  MCQTest[]
  gradedAnswers StudentAnswer[] // Answers graded by this teacher
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  mcqTests      MCQTest[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
  mcqTests MCQTest[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  
  // Recurrence fields
  isRecurring     Boolean  @default(false)
  recurrenceEndDate DateTime?
  parentLessonId  Int?     // Reference to the original lesson if this is a duplicate
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])

  @@unique([studentId, date])
  @@index([date])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model TeacherAttendance {
  id              Int       @id @default(autoincrement())
  date            DateTime
  present         Boolean   @default(true)
  checkInTime     DateTime  @default(now())
  teacherId       String
  teacher         Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  locationId      Int?
  location        Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  livenessVerified Boolean  @default(false)
  latitude        Float?
  longitude       Float?
  
  @@unique([teacherId, date])
  @@index([date])
  @@index([teacherId])
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  latitude    Float
  longitude   Float
  radius      Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  teacherAttendances TeacherAttendance[]
}

model AttendanceSettings {
  id                Int      @id @default(autoincrement())
  startTime         String   // Format: "HH:MM" (e.g., "08:00")
  endTime           String   // Format: "HH:MM" (e.g., "08:45")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// MCQ System Models
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  OPEN_ENDED
}

model MCQTest {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  subjectId   Int?
  classId     Int?
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject   Subject?      @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  class     Class?        @relation(fields: [classId], references: [id], onDelete: SetNull)
  teacher   Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  questions MCQQuestion[]
  attempts  MCQAttempt[]
  
  @@index([teacherId])
  @@index([subjectId])
  @@index([classId])
}

model MCQQuestion {
  id           String       @id @default(cuid())
  testId       String
  question     String       @db.Text
  answer       String       // The correct answer text
  options      Json         // Array of option strings: ["Option A", "Option B", "Option C", "Option D"]
  questionType QuestionType @default(MULTIPLE_CHOICE)
  explanation  String?      @db.Text
  orderIndex   Int          // For question ordering
  createdAt    DateTime     @default(now())
  
  test    MCQTest         @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]
  
  @@index([testId])
}

model MCQAttempt {
  id             String    @id @default(cuid())
  testId         String
  studentId      String
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  score          Float?
  totalQuestions Int
  correctAnswers Int       @default(0)
  
  test    MCQTest         @relation(fields: [testId], references: [id], onDelete: Cascade)
  student Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]
  
  @@index([testId])
  @@index([studentId])
}

model StudentAnswer {
  id            String    @id @default(cuid())
  attemptId     String
  questionId    String
  userAnswer    String    @db.Text
  isCorrect     Boolean?  // Nullable for open-ended questions pending grading
  answeredAt    DateTime  @default(now())
  gradedAt      DateTime? // When teacher graded the answer
  gradedBy      String?   // Teacher who graded
  teacherFeedback String? @db.Text // Optional feedback from teacher
  pointsAwarded Float?    // For partial credit (0-1, where 1 = full credit)
  
  attempt  MCQAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question MCQQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  grader   Teacher?    @relation(fields: [gradedBy], references: [id], onDelete: SetNull)
  
  @@unique([attemptId, questionId]) // Student can only answer each question once per attempt
  @@index([attemptId])
  @@index([questionId])
  @@index([gradedBy])
}